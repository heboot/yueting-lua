local rootSprite
local podcastListview
local podcastItem
local mainTitle
local parentId
local playerJson

local isFlag

-- @brief root子节点创建完事件
function bodyBuildChildrenFinished(sprite)
	 rootSprite = sprite
	 podcastListview = Sprite:findChild(sprite, 'podcastListview')
	 podcastItem = Sprite:findChild(rootSprite, 'podcastItem')
	 mainTitle = Sprite:findChild(rootSprite, 'mainTitle') 
	local reg = Reg:create(Reg.com_wondertek_mobileaudio.personalBoke)
	local isUserId=Reg:getInteger(reg,'isUserId')
	local isNodeId=Reg:getInteger(reg,'isNodeId')
	if isUserId ==1 then
		isFlag = 'isUserId'
	end
	if isNodeId == 1 then
		isFlag = 'isNodeId'
	end
	 
end

--[[  节点消息方法  ]]--
function bodyOnSpriteEvent(msg, param)
    if msg == MSG_ACTIVATE then
	  Bottom:show()
      requestPodcastListData()
	  Loading:show()
    elseif msg == MSG_DEACTIVATE then
         --commonDeactivate()
		 --requestPodcastListData()
         --	Scene:freeByHandle(rootSprite)
    elseif msg == Msg.login then
      
    else
        Util:onSpriteEvent(msg, param)
    end
end

--[[  请求小说列表数据方法  ]]--
function requestPodcastListData()
	local reg = Reg:create(Reg.com_wondertek_mobileaudio.personalBoke)
	local data=Reg:getString(reg,'bokeItemData')
	local isUserId=Reg:getInteger(reg,'isUserId')
	local isNodeId=Reg:getInteger(reg,'isNodeId')
	if isFlag and isFlag ~= nil then
		if isFlag == 'isUserId' then
			local _,_,userId=string.find(data,'userId=(%d+);')
			local _,_,albumType = string.find(data,'albumType=(%d-);')
			if userId and userId ~= '' then
			Http:request('podcastListData', Util:getWeiBoServer() .. '/publish/clt/resource/mobileaudio3/podcast/podcastSpecialData.jsp?'..'userId='..userId..'&albumType='..albumType,103)
			end	
		end
		if isFlag == 'isNodeId' then
			local _,_,nodeId=string.find(data,'nodeId=(%d+);')
			if nodeId and nodeId ~= '' then
			Http:request('podcastListData', Util:getWeiBoServer() .. '/publish/clt/resource/mobileaudio3/podcast/podcastSpecialData.jsp?'..'nodeId='..nodeId,103)
			end
		end
	else
		if isNodeId == 1 then
			local _,_,nodeId=string.find(data,'nodeId=(%d+);')
			if nodeId and nodeId ~= '' then
			Http:request('podcastListData', Util:getWeiBoServer() .. '/publish/clt/resource/mobileaudio3/podcast/podcastSpecialData.jsp?'..'nodeId='..nodeId,103)
			end
		end
		if isUserId == 1 then
			local _,_,userId=string.find(data,'userId=(%d+);')
			local _,_,albumType = string.find(data,'albumType=(%d-);')
			if userId and userId ~= '' then
			Http:request('podcastListData', Util:getWeiBoServer() .. '/publish/clt/resource/mobileaudio3/podcast/podcastSpecialData.jsp?'..'userId='..userId..'&albumType='..albumType,103)
			end
		end
	end
end

--[[  插件消息方法  ]]--
function bodyOnPluginEvent(msg, param)
	if msg == 103 then
	     Loading:close()
		 podcastListData = Http:jsonDecode('podcastListData')
		 local psname = podcastListData.sname
		 Log:write('==============mobile',podcastListData.mobile)
		 if not psname or psname == '' or psname == ' ' then
			psname = '用户'..string.sub(podcastListData.mobile,8,11)
		 end
		 if podcastListData.albumType=='0' then
		     Sprite:setProperty(mainTitle,'text',psname..'的作品')
		 elseif podcastListData.albumType=='1' then
		     Sprite:setProperty(mainTitle,'text',psname..'的娱乐')
		 elseif podcastListData.albumType=='2' then
		     Sprite:setProperty(mainTitle,'text',psname..'的音乐')
		 elseif podcastListData.albumType=='3' then
		     Sprite:setProperty(mainTitle,'text',psname..'的情感')
		 elseif podcastListData.albumType=='4' then
		     Sprite:setProperty(mainTitle,'text',psname..'的脱口秀')
		 end
		     LoadpodcastListviewData()
	elseif msg == Msg.getJsonPlayer then
        Loading:close()
        playerJson = Http:jsonDecode('playerData')
        if playerJson and playerJson.code == '1014' then
            Net:goToMyAccount()
        elseif playerJson and playerJson.orderList then
            OrderNode:show(playerJson)
        elseif playerJson and playerJson.errordesc then
            Tips:show(playerJson.errordesc)
        elseif playerJson and 'table' == type(playerJson) then
            --获取本次数据内容
            gContparam = playerJson ~=nil and playerJson.param or ''
            _,_,contentId = string.find(gContparam , 'contentId=(%d+);')
            if playerJson and playerJson~='' and gContparam and gContparam ~='' then
                if string.match(gContparam,'objType=live') or string.match(gContparam,'objType=review') then
                    -- donothing
                elseif string.match(gContparam,'objType=community') or string.match(gContparam,'objType=content') then
                    --判断是否音频正在播放，如在播放则停止
                    if getAudioPlayFlag then
                        if getAudioPlayFlag() ~= 0 then
                            Log:write('------------Msg.getJsonPlayer-2--------')
                            --停止定时器，防止视频停止后音频点播自动播放下一集，取悦听场景句柄
                            if getAudioScene then
                                local curAudioScene = getAudioScene()
                                Log:write('Msg.getJsonPlayer CurScene =',curAudioScene )
                                Sprite:sendEvent(curAudioScene, Msg.stopAudioTimer)
                                resetAudioScene()
								
                            end
                            --Player:stop()
                            --Player:show(0)
                            --isPlayerCreate = false
                            --resetAudioPlayFlag()
                        end
                    end
                    initPlayer()
                end
            -- end
			end
        -- else
            -- Tips:show(Util:getTipsMsg(usrMsgFileName.localTipsMsg,7)) --('无法获取数据，请稍后再试')
        end	
    else
      Util:onPluginEvent(msg, param)			
	end
end

-- @brief 初始化播放器
function initPlayer()
    
    -- symbian手机请求的播放地址不知为何会带&amp;字符串 导致open后play死机 在这里统一替换
    playUrl = string.gsub(playerJson.playUrl,"&amp;","&")

    local regplayer = Reg:create(Reg.com_wondertek_mobileaudio.player)
    Reg:setInteger(regplayer, 'minFlag',0) --客户端状态，0表示在应用里，1表示在后台,2表示重复后台 由于可能在后台切换player界面 所以用reg记录
    if Reg:getInteger(regplayer, 'isScreenLock') == 0 then  -- 是否为锁屏状态
        isScreenLock = false
    else
        isScreenLock = true
    end
    createPlayer()
end



-- @brief 创建播放器区域
function createPlayer()
	Log:write('创建')
    Player:create(0, -1, 1, 1)
    isPlayerCreate = true
    --旋屏操作放在openUrl里
    openUrl()

    ----设置音频播放标志,在此处加是解决loading数据时快速点返回，当前场景以及切换而本场景不释放仍然能收到音频数据产生播放，单播放标志不对的情况
    if isPlayerCreate then
        setAudioPlayFlag(2)

        --增加音频通知消息
        if SendNotification then
            if objType == '0' or objType=='content' then --音频点播
                if gContparam and gContparam ~= '' then
                    if setAudioGParam then setAudioGParam(gContparam) end --保存当前音频参数，供其他场景保存历史记录使用
                    local reg = Reg:create(Reg.com_wondertek_mobileaudio.playeryue) --保存当前播放节目名称
                    -- Reg:setString(reg, 'audioCurPlayingTitle',title)
                end
            end
        end
    else
        resetAudioPlayFlag()
    end
end

-- @brief 打开url
function openUrl()
    --取断点
    local reg = Reg:create(Reg.com_wondertek_mobileaudio.player)
    local breakPoint = Reg:getInteger(reg, 'breakPoint')
    if breakPoint ~= 0 then
        Reg:remove(reg, 'breakPoint')
    end
    if Http:getCurConnect() == 'WLAN' then
        System:setBufferTime(1)
    else
        System:setBufferTime(3)
    end
    Player:open(playUrl,Http:getCurConnect(), breakPoint)
	pluginInvoke(Player:_getHandle(),'StartPlayer')    
	Log:write('testbottominsert',playerJson.titleName)
	local bottomReg = Reg:create(Reg.com_wondertek_mobileaudio.bottomPlayer)
	Reg:setString(bottomReg,'audioName',playerJson.titleName)
	Reg:setString(bottomReg,'type',2)
	Reg:setString(bottomReg,'playUrl',playUrl)	
	Player:setFullScreen(0)
    Timer:cancel(TimerId.status)
    Timer:set(TimerId.status, 1000, 'getStatus')
	local reg = Reg:create(Reg.com_wondertek_mobileaudio.detail)
    Reg:setString(reg,'audioResource','')
end

-- @brief 刷新播放与暂停按钮状态
function getStatus()
    lastStatus = status
    status, errorCode = Player:getStatus()  
	Log:write('bushi',objType,status,errorCode)
    if  status == Player.status.Connecting or
        status == Player.status.Buffering or status == Player.status.Idle then
	    uiRefresh()
		if objType ~= 'live' then 
		--refreshDemandProgress()	
		end
	elseif (status == Player.status.Playing and not PEReviewFinishFlag ) then
        uiPause()
		if objType ~= 'live' then 
		--refreshDemandProgress()	
		end
	local CurTime = timeFormat(Player:getCurTime())
	--Sprite:setProperty(audioCurTime,'text',CurTime)
        -- if objType ~= 'live' then refreshDemandProgress() end
    elseif status == Player.status.Paused or status == Player.status.Ready then
        uiPlay()
        -- if objType == 'live' then refreshLiveProgress() end
    elseif status == Player.status.Stopped or status == Player.status.Finished or PEReviewFinishFlag then
        if lastStatus ~= Player.status.Stopped and lastStatus ~= Player.status.Finished then
            -- if status == Player.status.Finished then
                -- local pIndex = getNextPlayParam(1)
                -- if subListTable and subListTable ~= '' and pIndex ~= -1 then
                    -- Log:write('subListTable[pIndex].param=',subListTable[pIndex].param)
                    -- doPlaynext(subListTable[pIndex].param)
                -- else
                    -- resetAudioPlayFlag()           
                    -- Player:stop()
                    -- Player:show(0)
                    -- Timer:cancel(TimerId.status)
                -- end
            -- else
                -- Player:stop()
                -- Player:show(0)
                -- Timer:cancel(TimerId.status)
            -- end
        end
        -- uiPlay()
    end
	 if objType ~= 'live' and objType ~= 'review' then
            --local totalTime = timeFormat(Player:getTotalTime())
            --Sprite:setProperty(lblCurtime,'text',totalTime)
     end
    Timer:set(TimerId.status, 500, 'getStatus')
end

-- @brief 格式化时间
function timeFormat(sec)
    if sec == nil then return '00:00:00' end
	local  hh = math.floor(sec / 3600) < 10 and '0' .. math.floor(sec / 3600) or math.floor(sec / 3600)
    local mm = math.floor(sec / 60) < 10 and '0' .. math.floor(sec / 60) or math.floor(sec / 60)
    local ss = math.mod(sec, 60) < 10 and '0' .. math.mod(sec, 60) or math.mod(sec, 60)
    local time = hh..':'..mm .. ':' .. ss
    return time
end

--[[  加载小说列表数据方法 ]]--
function LoadpodcastListviewData()
    if podcastListData.contentList~='' and podcastListData.contentList~=nil then 
	     ListView:removeAllItems(podcastListview, 1, 1)
         ListView:loadItem(podcastListview,podcastItem,#podcastListData.contentList+1,'loadpodcastItem')
	     ListView:adjust(podcastListview)
   end	
end

--[[  加载小说列表ITEM数据方法 ]]--
function loadpodcastItem(list,item,index)
    Sprite:setRect(item, 0,0,720,172)
    Sprite:setProperty(item,'extendstyle','1010')    
	-- if podcastListData.contentList[index].omsId~='' and podcastListData.contentList[index].omsId~=nil then 
	     local podcastImage=Sprite:findChild(item,'podcastImage')
	     local podcastName=Sprite:findChild(item,'podcastName')
	     local podcastAnchor=Sprite:findChild(item,'podcastAnchor')
		 Sprite:setProperty(podcastName,'text',podcastListData.contentList[index].title)
	     Sprite:setProperty(podcastAnchor,'text',podcastListData.sname)
         if podcastListData.contentList[index].omsId~='' and podcastListData.contentList[index].omsId~=nil then 
		     Sprite:setProperty(podcastImage,'src',podcastListData.contentList[index].videoImg)
	         Sprite:setProperty(Sprite:findChild(item,'podcastItemBtn'),'data',podcastListData.contentList[index].param)
			 saveNodeInfo(podcastListData.contentList[index].title,{img=GetLocalFilename(podcastListData.contentList[index].videoImg),count=1,anchor=podcastListData.sname})
		 end  
	     saveNodeInfo(podcastListData.contentList[index].title,{img='',count=1,anchor=podcastListData.sname})
	-- end	
end

function saveNodeInfo(nodeName,propTable)
    local reg = Reg:create("tmp")
    Reg:load(reg, "WONDER:\\temp\\nodeInfo.xml")
    Reg:setTable(reg,Util:md5(nodeName),propTable)
    Reg:save(reg, "WONDER:\\temp\\nodeInfo.xml")
    Reg:release("tmp")
end

--返回按钮方法
function backBtnOnSelect(sprite)
	Scene:back()
end

-- @brief 主节点OnKeyUp事件
function mainNodeOnKeyUp(sprite, kc)
    if kc == Key.F2 then
        if commonF2KeyUp and commonF2KeyUp() then return end
        Scene:back()
    end
end

function podcastItemBtnOnSelect(sprite)
	local item= Sprite:getParent(sprite)
    local index=ListView:getItemIndex(item) 
    local data = Sprite:getData(sprite)
	local bokeCollectTable={}
	for i=0,#podcastListData.contentList do
	     table.insert(bokeCollectTable,podcastListData.contentList[i])
	end
    local reg = Reg:create(Reg.com_wondertek_mobileaudio.personalBoke)
	Reg:setString(reg,'bokeItemId',data)
	Reg:setString(reg,'bokeItemIndex',index)
	bokeCollectTable=Reg:setTable(reg,'bokeCollectTable',bokeCollectTable)
    Util:_goPlay(data)
	--Sprite:loadFromXml(sprite,"MODULE:\\com_wondertek_mobileaudio\\bokeplay.wdml") 
	--Scene:go(Alias.bokeplay,{freeDestScene=true})
end

--播放
function Util:_goPlay(contparam, param)
	Scene:freeByName('MODULE:\\com_wondertek_mobileaudio\\playyue.wdml') 
	Scene:freeByName('MODULE:\\com_wondertek_mobileaudio\\audioplay.wdml')
	Scene:freeByName('MODULE:\\com_wondertek_mobileaudio\\audioplaylocal.wdml') 
	Loading:show()
    Log:write('_goPlay=====',contparam, param)
    local _,_,contentId = string.find(contparam, 'contentId=(%d+);')
    if contentId == nil then contentId = "null" end
    local _,_,nodeId = string.find(contparam, 'nodeId=(%d+);')
    local _,_,objType = string.find(contparam, 'objType=([%a%d]+);')
    if not objType then
        Tips:show(Util:getTipsMsg(usrMsgFileName.localTipsMsg,11)) --('该内容已下线')
		Loading:close()
        return
    end
    if not nodeId and objType ~= 'community' then
        Tips:show(Util:getTipsMsg(usrMsgFileName.localTipsMsg,11)) --('该内容已下线')
		Loading:close()
        return
    end
    nodeId = nodeId or ''
    local reg = Reg:create(Reg.com_wondertek_mobileaudio.player)
    if param and param.breakPoint then 
	Reg:setInteger(reg, 'breakPoint', param.breakPoint) 
	else Reg:setInteger(reg, 'breakPoint', 0) 
	end
    Reg:setString(reg, 'contparam', contparam)
    if param and param.multiDownload then Reg:setString(reg, 'multiDownload', param.multiDownload) else Reg:setString(reg, 'multiDownload', 'false') end
    if param and param.isAudio and param.isAudio == "true" then Reg:setString(reg, 'isAudio', param.isAudio) else Reg:setString(reg, 'isAudio', 'false') end
    if param and not param.withoutLoading then uiRefresh()end
    initCodeRateRule(Util:getNetworkType())  --初始化码率适配规则
    local codeRate = Config:get('rate') --默认读取码率设置，home页里根据网络状况设置初始值,2G流畅，3G和wlan默认是高清
    if param and param.codeRate then codeRate = param.codeRate end --手动码率切换时从参数读取coderate
    local url = Util:getServer() .. Alias.playerData .. '?contentId=' .. contentId .. '&nodeId=' .. nodeId .. '&objType=community' .. '&rate=' .. codeRate
    url = string.find(contparam, 'live=true') and url .. '&live=true' or url
	uiRefresh()
    Http:request('playerData', url, Msg.getJsonPlayer, {useCache = 0})
end


--进入个人主页按钮
function personalHomepageBtnOnSelect(sprite)
     local reg = Reg:create(Reg.com_wondertek_mobileaudio.personalBoke)
     Reg:setString(reg,'userId','userId='..podcastListData.userId..';')
	 Reg:setInteger(reg,'isUserId',1)
     Scene:go(Alias.personalBokeHomepage,{freeDestScene=true})
end